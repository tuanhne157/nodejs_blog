// gi·∫£i quy·∫øt ƒë·ªô tin c·∫≠y  ttl,durable,persistent,noAck
const amqp = require('amqplib');

async function sendMsg() {
    try {
        const conn = await amqp.connect('amqp://localhost:5672');
        const channel = await conn.createChannel();
        const queue = 'tasks';

        // durable : Queue kh√¥ng b·ªã m·∫•t n·∫øu RabbitMQ restart.
        // M·∫∑c ƒë·ªãnh: durable: false ‚Üí queue s·∫Ω b·ªã x√≥a khi broker restart.
        await channel.assertQueue(queue, { 
            durable: true,
            arguments: { 'x-message-ttl': 60000 } // TTL:  √ù nghƒ©a: Message h·∫øt h·∫°n s·∫Ω b·ªã lo·∫°i b·ªè sau 60s(gi·∫£m t·∫Øc ngh·∫Ωn queue).
        }); 

        const msg = { text: "X·ª≠ l√Ω ·∫£nh", id: Date.now() };
        const msgBuffer = Buffer.from(JSON.stringify(msg));

        // persistent : Message s·∫Ω ƒë∆∞·ª£c l∆∞u v√†o disk, thay v√¨ ch·ªâ ·ªü RAM.
        // K·∫øt h·ª£p v·ªõi durable queue ƒë·ªÉ b·∫£o v·ªá message khi broker crash.
        channel.sendToQueue(queue, msgBuffer, { persistent: true });
        console.log("üì§ Sent:", msg);

        await channel.close();
        await conn.close();
    } catch (err) {
        console.error("Error:", err);
    }
}

// g·ªçi l·∫°i h√†m ƒë·ªÉ ch·∫°y, n·∫øu kh√¥ng g·ªçi th√¨ h√†m s·∫Ω k ch·∫°y
// JavaScript s·∫Ω kh√¥ng t·ª± ch·∫°y h√†m n·∫øu b·∫°n kh√¥ng g·ªçi n√≥
sendMsg();
